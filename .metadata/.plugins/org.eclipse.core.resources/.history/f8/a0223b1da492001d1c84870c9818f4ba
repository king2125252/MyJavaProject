package com.location.controller;

import java.io.IOException;
import java.util.Collection;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;
import com.location.model.LocationService;
import com.location.model.LocationVO;

//@WebServlet("/back-end/Location/") 等同到web.xml註冊
@MultipartConfig(fileSizeThreshold = 1024 * 1024, maxFileSize = 5 * 1024 * 1024, maxRequestSize = 5 * 5 * 1024 * 1024)
public class LocationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {

		req.setCharacterEncoding("UTF-8");
		String action = req.getParameter("action");

		if ("insert".equals(action)) {
			String locName = req.getParameter("loc_name");
			String longitude = req.getParameter("longitude");
			String latitude = req.getParameter("latitude");
			String address = req.getParameter("address");
			String phone = req.getParameter("phone");

			LocationVO locVO = new LocationVO();
			locVO.setLocName(locName);
			locVO.setLongitude(longitude);
			locVO.setLatitude(latitude);
			locVO.setLocAddress(address);
			locVO.setLocPhone(phone);
			//解析圖片
			Collection<Part> pic = req.getParts();

//					開始新增資料					
			LocationService locSer = new LocationService();
			locVO = locSer.addLoc(locName, longitude, latitude, address, phone, pic);

//					完成新增準備轉交
//			String url = "/back-end/Location/locManage.jsp";
//			req.getRequestDispatcher(url).forward(req, res);
		}

		if("getOne_For_Update".equals(action)) {
			//1.接收請求參數
			Integer locId = Integer.valueOf(req.getParameter("LOC_ID"));
			
			//開始查詢資料
			LocationService locSrv = new LocationService();
			LocationVO locVO = locSrv.getOneLoc(locId);
			
			//查詢完成準備轉交
			req.setAttribute("locVO", locVO);
			String url = "/back-end/Location/editLoc.jsp";
			req.getRequestDispatcher(url).forward(req, res);
		}
		
if ("update".equals(action)) { // 來自update_emp_input.jsp的請求
			
			List<String> errorMsgs = new LinkedList<String>();
			// Store this set in the request scope, in case we need to
			// send the ErrorPage view.
			req.setAttribute("errorMsgs", errorMsgs);
		
				/***************************1.接收請求參數 - 輸入格式的錯誤處理**********************/
				Integer empno = Integer.valueOf(req.getParameter("empno").trim());
				
				String ename = req.getParameter("ename");
				String enameReg = "^[(\u4e00-\u9fa5)(a-zA-Z0-9_)]{2,10}$";
				if (ename == null || ename.trim().length() == 0) {
					errorMsgs.add("員工姓名: 請勿空白");
				} else if(!ename.trim().matches(enameReg)) { //以下練習正則(規)表示式(regular-expression)
					errorMsgs.add("員工姓名: 只能是中、英文字母、數字和_ , 且長度必需在2到10之間");
	            }
				
				String job = req.getParameter("job").trim();
				if (job == null || job.trim().length() == 0) {
					errorMsgs.add("職位請勿空白");
				}	
				
				java.sql.Date hiredate = null;
				try {
					hiredate = java.sql.Date.valueOf(req.getParameter("hiredate").trim());
				} catch (IllegalArgumentException e) {
					hiredate=new java.sql.Date(System.currentTimeMillis());
					errorMsgs.add("請輸入日期!");
				}

				Double sal = null;
				try {
					sal = Double.valueOf(req.getParameter("sal").trim());
				} catch (NumberFormatException e) {
					sal = 0.0;
					errorMsgs.add("薪水請填數字.");
				}

				Double comm = null;
				try {
					comm = Double.valueOf(req.getParameter("comm").trim());
				} catch (NumberFormatException e) {
					comm = 0.0;
					errorMsgs.add("獎金請填數字.");
				}

				Integer deptno = Integer.valueOf(req.getParameter("deptno").trim());

				EmpVO empVO = new EmpVO();
				empVO.setEmpno(empno);
				empVO.setEname(ename);
				empVO.setJob(job);
				empVO.setHiredate(hiredate);
				empVO.setSal(sal);
				empVO.setComm(comm);
				empVO.setDeptno(deptno);

	
	}
}
